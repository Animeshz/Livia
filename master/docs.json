{"CharlotteDunois\\Livia\\Arguments\\Argument":{"name":"CharlotteDunois\\Livia\\Arguments\\Argument","line":29,"short_desc":"A fancy argument.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["string",false]],"key","Key for the argument."],[[["string",false]],"label","Label for the argument."],[[["string",false]],"prompt","Question prompt for the argument."],[[["\\CharlotteDunois\\Livia\\Types\\ArgumentType",false],["null",false]],"type","Type of the argument."],[[["int",false],["float",false],["null",false]],"max","If type is integer or float, this is the maximum value of the number. If type is string, this is the maximum length of the string."],[[["int",false],["float",false],["null",false]],"min","If type is integer or float, this is the minimum value of the number. If type is string, this is the minimum length of the string."],[[["mixed",false],["null",false]],"default","The default value for the argument."],[[["bool",false]],"infinite","Whether the argument accepts an infinite number of values."],[[["callable",false],["null",false]],"validate","Validator function for validating a value for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::validate})"],[[["callable",false],["null",false]],"parse","Parser function to parse a value for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::parse})"],[[["callable",false],["null",false]],"emptyChecker","Empty checker function for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::isEmpty})"],[[["int",false]],"wait","How long to wait for input (in seconds)."]]},"namespace":"CharlotteDunois\\Livia\\Arguments","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Arguments\/Argument.php","relative_file":"\/src\/Arguments\/Argument.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"client":{"name":"client","line":29,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"default":{"name":"default","line":29,"short_desc":"The default value for the argument.","long_desc":null,"hint":[["mixed",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"emptyChecker":{"name":"emptyChecker","line":29,"short_desc":"Empty checker function for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::isEmpty})","long_desc":null,"hint":[["callable",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"infinite":{"name":"infinite","line":29,"short_desc":"Whether the argument accepts an infinite number of values.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"key":{"name":"key","line":29,"short_desc":"Key for the argument.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"label":{"name":"label","line":29,"short_desc":"Label for the argument.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"max":{"name":"max","line":29,"short_desc":"If type is integer or float, this is the maximum value of the number. If type is string, this is the maximum length of the string.","long_desc":null,"hint":[["int",false],["float",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"min":{"name":"min","line":29,"short_desc":"If type is integer or float, this is the minimum value of the number. If type is string, this is the minimum length of the string.","long_desc":null,"hint":[["int",false],["float",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parse":{"name":"parse","line":29,"short_desc":"Parser function to parse a value for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::parse})","long_desc":null,"hint":[["callable",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"prompt":{"name":"prompt","line":29,"short_desc":"Question prompt for the argument.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":29,"short_desc":"Type of the argument.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Types\\ArgumentType",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"validate":{"name":"validate","line":29,"short_desc":"Validator function for validating a value for the argument. ({@see \\CharlotteDunois\\Livia\\Types\\ArgumentType::validate})","long_desc":null,"hint":[["callable",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"wait":{"name":"wait","line":29,"short_desc":"How long to wait for input (in seconds).","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":132,"short_desc":"Constructs a new Argument. Info is an array as following:","long_desc":"```\narray(\n  'key' => string, (Key for the argument)\n  'label' => string, (Label for the argument, defaults to key)\n  'prompt' => string, (First prompt for the argument when it wasn't specified)\n  'type' => string, (Type of the argument, must be the ID of one of the registered argument types)\n  'max' => int|float, (If type is integer or float this is the maximum value, if type is string this is the maximum length, optional)\n  'min' => int|float, (If type is integer or float this is the minimum value, if type is string this is the minimum length, optional)\n  'default' => mixed, (Default value for the argumen, must not be null, optional)\n  'infinite' => bool, (Infinite argument collecting, defaults to false)\n  'validate' => callable, (Validator function for the argument, optional)\n  'parse' => callable, (Parser function for the argument, optional)\n  'emptyChecker' => callable, (Empty checker function for the argument, optional)\n  'wait' => int (how long to wait for input, in seconds)\n)\n```","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":132,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":132,"endLine":132}},"default":null,"variadic":false,"is_by_ref":false},"info":{"name":"info","line":132,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"obtain":{"name":"obtain","line":262,"short_desc":"Prompts the user and obtains the value for the argument. Resolves with an array of ('value' => mixed, 'cancelled' => string|null, 'prompts' => Message[], 'answers' => Message[]). Cancelled can be one of user, time and promptLimit.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":262,"short_desc":"Message that triggered the command.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":262,"endLine":262}},"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":262,"short_desc":"Pre-provided value(s).","long_desc":null,"hint":[["string",false],["string",true]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"bag":{"name":"bag","line":262,"short_desc":"The argument bag.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Arguments\\ArgumentBag",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Arguments","ArgumentBag"],"attributes":{"startLine":262,"endLine":262}},"default":null,"variadic":false,"is_by_ref":false},"valid":{"name":"valid","line":262,"short_desc":"Whether the last retrieved value was valid.","long_desc":null,"hint":[["bool",false],["string",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Arguments\\ArgumentBag":{"name":"CharlotteDunois\\Livia\\Arguments\\ArgumentBag","line":15,"short_desc":"A fancy bag for our arguments. This class is used for a library-internal optimization.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Arguments","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Arguments\/ArgumentBag.php","relative_file":"\/src\/Arguments\/ArgumentBag.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"answers":{"name":"answers","line":44,"short_desc":"The answer messages.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",true]],"hint_desc":"","tags":[],"modifiers":1,"default":{"nodeType":"Expr_Array","items":[],"attributes":{"startLine":44,"endLine":44,"kind":1}},"errors":[],"source":null},"argument":{"name":"argument","line":20,"short_desc":"The argument this bag is for.","long_desc":"","hint":[["\\CharlotteDunois\\Livia\\Arguments\\Argument",false]],"hint_desc":"","tags":[],"modifiers":1,"default":null,"errors":[],"source":null},"cancelled":{"name":"cancelled","line":50,"short_desc":"Whether the bag got cancelled.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"default":null,"errors":[],"source":null},"done":{"name":"done","line":56,"short_desc":"Whether we are done.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"default":{"nodeType":"Expr_ConstFetch","name":{"nodeType":"Name","parts":["false"],"attributes":{"startLine":56,"endLine":56,"namespacedName":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Arguments","false"],"attributes":{"startLine":56,"endLine":56}}}},"attributes":{"startLine":56,"endLine":56}},"errors":[],"source":null},"promptLimit":{"name":"promptLimit","line":32,"short_desc":"Maximum number of times to prompt for the argument.","long_desc":"","hint":[["int",false],["float",false]],"hint_desc":"","tags":[],"modifiers":1,"default":null,"errors":[],"source":null},"prompts":{"name":"prompts","line":38,"short_desc":"The prompt messages.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",true]],"hint_desc":"","tags":[],"modifiers":1,"default":{"nodeType":"Expr_Array","items":[],"attributes":{"startLine":38,"endLine":38,"kind":1}},"errors":[],"source":null},"values":{"name":"values","line":26,"short_desc":"The values.","long_desc":"","hint":[["mixed",true]],"hint_desc":"","tags":[],"modifiers":1,"default":{"nodeType":"Expr_Array","items":[],"attributes":{"startLine":26,"endLine":26,"kind":1}},"errors":[],"source":null}},"methods":{"done":{"name":"done","line":73,"short_desc":"Closes the bag formally and returns itself.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Livia\\Arguments\\ArgumentCollector":{"name":"CharlotteDunois\\Livia\\Arguments\\ArgumentCollector","line":19,"short_desc":"Obtains, validates, and prompts for argument values.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["\\CharlotteDunois\\Livia\\Arguments\\Argument",true]],"args","Arguments for the collector."],[[["int",false],["double",false]],"promptLimit","Maximum number of times to prompt for a single argument."]]},"namespace":"CharlotteDunois\\Livia\\Arguments","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Arguments\/ArgumentCollector.php","relative_file":"\/src\/Arguments\/ArgumentCollector.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"args":{"name":"args","line":19,"short_desc":"Arguments for the collector.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Arguments\\Argument",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"client":{"name":"client","line":19,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"promptLimit":{"name":"promptLimit","line":19,"short_desc":"Maximum number of times to prompt for a single argument.","long_desc":null,"hint":[["int",false],["double",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":45,"short_desc":"Constructs a new Argument Collector.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":45,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":45,"endLine":45}},"default":null,"variadic":false,"is_by_ref":false},"args":{"name":"args","line":45,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"promptLimit":{"name":"promptLimit","line":45,"short_desc":"","long_desc":null,"hint":[["int",false],["double",false]],"tags":[],"modifiers":null,"default":"\\INF","variadic":false,"is_by_ref":false}}},"obtain":{"name":"obtain","line":142,"short_desc":"Obtains values for the arguments, prompting if necessary.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":142,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":142,"endLine":142}},"default":null,"variadic":false,"is_by_ref":false},"provided":{"name":"provided","line":142,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":null,"default":"array()","variadic":false,"is_by_ref":false},"promptLimit":{"name":"promptLimit","line":142,"short_desc":"","long_desc":null,"hint":[["int",false],["double",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\CommandDispatcher":{"name":"CharlotteDunois\\Livia\\CommandDispatcher","line":17,"short_desc":"Handles parsing messages and running commands from them.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."]]},"namespace":"CharlotteDunois\\Livia","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/CommandDispatcher.php","relative_file":"\/src\/CommandDispatcher.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"client":{"name":"client","line":17,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"addInhibitor":{"name":"addInhibitor","line":133,"short_desc":"Adds an inhibitor.","long_desc":"The inhibitor is supposed to return false, if the command should not be blocked. Otherwise it should return a string (as reason) or an array, containing as first element the reason and as second element a Promise (which resolves to a Message), a Message instance or null.\nThe inhibitor can return a Promise (for async computation), but has to resolve with `false` or reject with array or string.\n\nCallable specification:\n```\nfunction (\\CharlotteDunois\\Livia\\CommandMessage $message): array|string|false|ExtendedPromiseInterface\n```","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"inhibitor":{"name":"inhibitor","line":133,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"handleMessage":{"name":"handleMessage","line":161,"short_desc":"Handles an incoming message.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":161,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":161,"endLine":161}},"default":null,"variadic":false,"is_by_ref":false},"oldMessage":{"name":"oldMessage","line":161,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":161,"endLine":161}},"default":"null","variadic":false,"is_by_ref":false}}},"removeInhibitor":{"name":"removeInhibitor","line":146,"short_desc":"Removes an inhibitor.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"inhibitor":{"name":"inhibitor","line":146,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\CommandMessage":{"name":"CharlotteDunois\\Livia\\CommandMessage","line":22,"short_desc":"A command message.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"message","The message that triggers the command."],[[["\\CharlotteDunois\\Livia\\Commands\\Command",false],["null",false]],"command","The command that got triggered, if any."],[[["string",false],["null",false]],"argString","Argument string for the command."],[[["string",true],["null",false]],"patternMatches","Pattern matches (if from a pattern trigger)."]]},"namespace":"CharlotteDunois\\Livia","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/CommandMessage.php","relative_file":"\/src\/CommandMessage.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"argString":{"name":"argString","line":22,"short_desc":"Argument string for the command.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"client":{"name":"client","line":22,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"command":{"name":"command","line":22,"short_desc":"The command that got triggered, if any.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"message":{"name":"message","line":22,"short_desc":"The message that triggers the command.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"patternMatches":{"name":"patternMatches","line":22,"short_desc":"Pattern matches (if from a pattern trigger).","long_desc":null,"hint":[["string",true],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"direct":{"name":"direct","line":532,"short_desc":"Responds with a direct message. Resolves with an instance of Message or an array of Message instances.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":532,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":532,"short_desc":"Message Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":542,"short_desc":"Shortcut to $this->message->edit.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":542,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":542,"short_desc":"Message Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"parseArgs":{"name":"parseArgs","line":621,"short_desc":"Parses an argument string into an array of arguments.","long_desc":"","hint":[["string",true]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"argString":{"name":"argString","line":621,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"argCount":{"name":"argCount","line":621,"short_desc":"float = \\INF","long_desc":null,"hint":[["int",false],["float",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false},"allowSingleQuotes":{"name":"allowSingleQuotes","line":621,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false}}},"parseCommandArgs":{"name":"parseCommandArgs","line":150,"short_desc":"Parses the argString into usable arguments, based on the argsType and argsCount of the command.","long_desc":"","hint":[["string",false],["string",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"reply":{"name":"reply","line":522,"short_desc":"Responds with a reply message. Resolves with an instance of Message or an array of Message instances.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":522,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":522,"short_desc":"Message Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"run":{"name":"run","line":166,"short_desc":"Runs the command. Resolves with an instance of Message or an array of Message instances.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"say":{"name":"say","line":512,"short_desc":"Responds with a plain message. Resolves with an instance of Message or an array of Message instances.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":512,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":512,"short_desc":"Message Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\CommandRegistry":{"name":"CharlotteDunois\\Livia\\CommandRegistry","line":21,"short_desc":"Handles registration and searching of commands and groups.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"commands","Registered commands, mapped by their name."],[[["string",true]],"commandsDirectories","List of fully resolved path to the bot's commands directories."],[[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"groups","Registered command groups, mapped by their id."],[[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"types","Registered argument types, mapped by their name."]]},"namespace":"CharlotteDunois\\Livia","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/CommandRegistry.php","relative_file":"\/src\/CommandRegistry.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"client":{"name":"client","line":21,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"commands":{"name":"commands","line":21,"short_desc":"Registered commands, mapped by their name.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"commandsDirectories":{"name":"commandsDirectories","line":21,"short_desc":"List of fully resolved path to the bot's commands directories.","long_desc":null,"hint":[["string",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"groups":{"name":"groups","line":21,"short_desc":"Registered command groups, mapped by their id.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"types":{"name":"types","line":21,"short_desc":"Registered argument types, mapped by their name.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"addCommandsDirectory":{"name":"addCommandsDirectory","line":630,"short_desc":"Adds a commands directory to be used in `resolveCommandPath`.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":630,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"findCommands":{"name":"findCommands","line":152,"short_desc":"Finds all commands that match the search string.","long_desc":"","hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"searchString":{"name":"searchString","line":152,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"exact":{"name":"exact","line":152,"short_desc":"Whether the search should be exact.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"message":{"name":"message","line":152,"short_desc":"The message to check usability against.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":152,"endLine":152}},"default":"null","variadic":false,"is_by_ref":false}}},"findGroups":{"name":"findGroups","line":205,"short_desc":"Finds all commands that match the search string.","long_desc":"","hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"searchString":{"name":"searchString","line":205,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"exact":{"name":"exact","line":205,"short_desc":"Whether the search should be exact.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"registerCommand":{"name":"registerCommand","line":290,"short_desc":"Registers a command. Emits a commandRegister event for each command.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":290,"short_desc":"The full qualified command name (`groupID:name`) or an initiated instance of it.","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"registerCommandsIn":{"name":"registerCommandsIn","line":335,"short_desc":"Registers all commands in a directory. The path gets saved as commands path. Emits a commandRegister event for each command.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":335,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"ignoreSameLevelFiles":{"name":"ignoreSameLevelFiles","line":335,"short_desc":"Ignores files in the specified directory and only includes files in sub directories. As string it will ignore the file if the filename matches with the string.","long_desc":null,"hint":[["bool",false],["string",false]],"tags":[],"modifiers":null,"default":"false","variadic":false,"is_by_ref":false}}},"registerDefaultCommands":{"name":"registerDefaultCommands","line":526,"short_desc":"Registers the default commands.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"registerDefaultGroups":{"name":"registerDefaultGroups","line":536,"short_desc":"Registers the default command groups.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"registerDefaultTypes":{"name":"registerDefaultTypes","line":550,"short_desc":"Registers the default argument types.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"registerDefaults":{"name":"registerDefaults","line":513,"short_desc":"Registers the default argument types, groups, and commands.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"registerGroup":{"name":"registerGroup","line":389,"short_desc":"Registers a group. Emits a groupRegister event for each group.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"group":{"name":"group","line":389,"short_desc":"An instance of CommandGroup or an associative array `[ 'id' => string, 'name' => string, 'guarded' => bool ]`. Guarded is optional, defaults to false.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false],["array",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"registerType":{"name":"registerType","line":429,"short_desc":"Registers a type. Emits a typeRegister event for each type.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"type":{"name":"type","line":429,"short_desc":"The full qualified class name or an initiated instance of it.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Types\\ArgumentType",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"registerTypesIn":{"name":"registerTypesIn","line":461,"short_desc":"Registers all types in a directory. Emits a typeRegister event for each type.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":461,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"ignoreSameLevelFiles":{"name":"ignoreSameLevelFiles","line":461,"short_desc":"Ignores files in the specified directory and only includes files in sub directories. As string it will ignore the file if the filename matches with the string.","long_desc":null,"hint":[["bool",false],["string",false]],"tags":[],"modifiers":null,"default":"false","variadic":false,"is_by_ref":false}}},"removeCommandsDirectory":{"name":"removeCommandsDirectory","line":649,"short_desc":"Removes a commands directory (used in `resolveCommandPath`).","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":649,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"reregisterCommand":{"name":"reregisterCommand","line":562,"short_desc":"Reregisters a command. Emits a commandReregister event.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":562,"short_desc":"The full qualified command name (groupID:name) or an initiated instance of it.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"oldCommand":{"name":"oldCommand","line":562,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":562,"endLine":562}},"default":null,"variadic":false,"is_by_ref":false}}},"resolveCommand":{"name":"resolveCommand","line":244,"short_desc":"Resolves a given command, command name or command message to the command.","long_desc":"","hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"resolvable":{"name":"resolvable","line":244,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Livia\\Commands\\Command",false],["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolveCommandPath":{"name":"resolveCommandPath","line":604,"short_desc":"Resolves a given group ID and command name to the path.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"groupID":{"name":"groupID","line":604,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":604,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"resolveGroup":{"name":"resolveGroup","line":266,"short_desc":"Resolves a given commandgroup, command group name or command message to the command group.","long_desc":"","hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"resolvable":{"name":"resolvable","line":266,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false],["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"unregisterCommand":{"name":"unregisterCommand","line":586,"short_desc":"Unregisters a command. Emits a commandUnregister event.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":586,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":586,"endLine":586}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Commands\\Command":{"name":"CharlotteDunois\\Livia\\Commands\\Command","line":39,"short_desc":"A command that can be run in a client.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["string",false]],"name","The name of the command."],[[["string",true]],"aliases","Aliases of the command."],[[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false],["null",false]],"group","The group the command belongs to, assigned upon registration."],[[["string",false]],"groupID","ID of the command group the command is part of."],[[["string",false]],"description","A short description of the command."],[[["string",false],["null",false]],"details","A longer description of the command."],[[["string",false]],"format","Usage format string of the command."],[[["string",true]],"examples","Examples of and for the command."],[[["bool",false]],"guildOnly","Whether the command can only be triggered in a guild channel."],[[["bool",false]],"ownerOnly","Whether the command can only be triggered by the bot owner (requires default hasPermission method)."],[[["string",true],["null",false]],"clientPermissions","The required permissions for the client user to make the command work."],[[["string",true],["null",false]],"userPermissions","The required permissions for the user to use the command."],[[["bool",false]],"nsfw","Whether the command can only be run in NSFW channels."],[[["array",false]],"throttling","Options for throttling command usages."],[[["bool",false]],"defaultHandling","Whether the command gets handled normally."],[[["array",false]],"args","An array containing the command arguments."],[[["int",false],["double",false]],"argsPromptLimit","How many times the user gets prompted for an argument."],[[["bool",false]],"argsSingleQuotes","Whether single quotes are allowed to encapsulate an argument."],[[["string",false]],"argsType","How the arguments are split when passed to the command's run method."],[[["int",false]],"argsCount","Maximum number of arguments that will be split."],[[["string",true]],"patterns","Regular expression triggers."],[[["bool",false]],"guarded","Whether the command is protected from being disabled."]]},"namespace":"CharlotteDunois\\Livia\\Commands","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Commands\/Command.php","relative_file":"\/src\/Commands\/Command.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"aliases":{"name":"aliases","line":39,"short_desc":"Aliases of the command.","long_desc":null,"hint":[["string",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"args":{"name":"args","line":39,"short_desc":"An array containing the command arguments.","long_desc":null,"hint":[["array",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"argsCount":{"name":"argsCount","line":39,"short_desc":"Maximum number of arguments that will be split.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"argsPromptLimit":{"name":"argsPromptLimit","line":39,"short_desc":"How many times the user gets prompted for an argument.","long_desc":null,"hint":[["int",false],["double",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"argsSingleQuotes":{"name":"argsSingleQuotes","line":39,"short_desc":"Whether single quotes are allowed to encapsulate an argument.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"argsType":{"name":"argsType","line":39,"short_desc":"How the arguments are split when passed to the command's run method.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"client":{"name":"client","line":39,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"clientPermissions":{"name":"clientPermissions","line":39,"short_desc":"The required permissions for the client user to make the command work.","long_desc":null,"hint":[["string",true],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"defaultHandling":{"name":"defaultHandling","line":39,"short_desc":"Whether the command gets handled normally.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"description":{"name":"description","line":39,"short_desc":"A short description of the command.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"details":{"name":"details","line":39,"short_desc":"A longer description of the command.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"examples":{"name":"examples","line":39,"short_desc":"Examples of and for the command.","long_desc":null,"hint":[["string",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"format":{"name":"format","line":39,"short_desc":"Usage format string of the command.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"group":{"name":"group","line":39,"short_desc":"The group the command belongs to, assigned upon registration.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"groupID":{"name":"groupID","line":39,"short_desc":"ID of the command group the command is part of.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guarded":{"name":"guarded","line":39,"short_desc":"Whether the command is protected from being disabled.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guildOnly":{"name":"guildOnly","line":39,"short_desc":"Whether the command can only be triggered in a guild channel.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":39,"short_desc":"The name of the command.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"nsfw":{"name":"nsfw","line":39,"short_desc":"Whether the command can only be run in NSFW channels.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"ownerOnly":{"name":"ownerOnly","line":39,"short_desc":"Whether the command can only be triggered by the bot owner (requires default hasPermission method).","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"patterns":{"name":"patterns","line":39,"short_desc":"Regular expression triggers.","long_desc":null,"hint":[["string",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"throttling":{"name":"throttling","line":39,"short_desc":"Options for throttling command usages.","long_desc":null,"hint":[["array",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"userPermissions":{"name":"userPermissions","line":39,"short_desc":"The required permissions for the user to use the command.","long_desc":null,"hint":[["string",true],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":229,"short_desc":"Constructs a new Command. Info is an array as following:","long_desc":"```\narray(\n  'name' => string,\n  'aliases' => string[], (optional)\n  'group' => string, (the ID of the command group)\n  'description => string,\n  'details' => string, (optional)\n  'format' => string, (optional)\n  'examples' => string[], (optional)\n  'guildOnly' => bool, (defaults to false)\n  'ownerOnly' => bool, (defaults to false)\n  'clientPermissions' => string[], (optional)\n  'userPermissions' => string[], (optional)\n  'nsfw' => bool, (defaults to false)\n  'throttling' => array, (associative array of array('usages' => int, 'duration' => int) - duration in seconds, optional)\n  'defaultHandling' => bool, (defaults to true)\n  'args' => array, ({@see \\CharlotteDunois\\Livia\\Arguments\\Argument} - key can be the index instead, optional)\n  'argsPromptLimit' => int|\\INF, (optional)\n  'argsType' => string, (one of 'single' or 'multiple', defaults to 'single')\n  'argsCount' => int, (optional)\n  'argsSingleQuotes' => bool, (optional)\n  'patterns' => string[], (Regular Expression strings, pattern matches don't get parsed for arguments, optional)\n  'guarded' => bool, (defaults to false)\n)\n```","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":229,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":229,"endLine":229}},"default":null,"variadic":false,"is_by_ref":false},"info":{"name":"info","line":229,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"anyUsage":{"name":"anyUsage","line":595,"short_desc":"Creates a usage string for any command.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":595,"short_desc":"A command + arguments string.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"prefix":{"name":"prefix","line":595,"short_desc":"Prefix to use for the prefixed command format.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"null","variadic":false,"is_by_ref":false},"user":{"name":"user","line":595,"short_desc":"User to use for the mention command format.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":595,"endLine":595}},"default":"null","variadic":false,"is_by_ref":false}}},"hasPermission":{"name":"hasPermission","line":387,"short_desc":"Checks if the user has permission to use the command.","long_desc":"","hint":[["bool",false],["string",false]],"hint_desc":"Whether the user has permission, or an error message to respond with if they don't.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":387,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":387,"endLine":387}},"default":null,"variadic":false,"is_by_ref":false},"ownerOverride":{"name":"ownerOverride","line":387,"short_desc":"Whether the bot owner(s) will always have permission.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false}}},"isEnabledIn":{"name":"isEnabledIn","line":543,"short_desc":"Checks if the command is enabled in a guild or globally.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":543,"short_desc":"The guild instance or the guild ID, null for global.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["string",false],["int",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"isUsable":{"name":"isUsable","line":557,"short_desc":"Checks if the command is usable for a message.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":557,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":557,"endLine":557}},"attributes":{"startLine":557,"endLine":557}},"default":"null","variadic":false,"is_by_ref":false}}},"reload":{"name":"reload","line":444,"short_desc":"Reloads the command.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"run":{"name":"run","line":437,"short_desc":"Runs the command. The method must return null, an array of Message instances or an instance of Message, a Promise that resolves to an instance of Message, or an array of Message instances. The array can contain Promises which each resolves to an instance of Message.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false],["\\React\\Promise\\ExtendedPromiseInterface",true],["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["\\CharlotteDunois\\Yasmin\\Models\\Message",true],["null",false],["void",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":437,"short_desc":"The message the command is being run for.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":437,"endLine":437}},"default":null,"variadic":false,"is_by_ref":false},"args":{"name":"args","line":437,"short_desc":"The arguments for the command, or the matches from a pattern. If args is specified on the command, thise will be the argument values object. If argsType is single, then only one string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the matches array from the pattern match.","long_desc":null,"hint":[["\\ArrayObject",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["ArrayObject"],"attributes":{"startLine":437,"endLine":437}},"default":null,"variadic":false,"is_by_ref":false},"fromPattern":{"name":"fromPattern","line":437,"short_desc":"Whether or not the command is being run from a pattern match.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"setEnabledIn":{"name":"setEnabledIn","line":518,"short_desc":"Enables or disables the command in a guild (or globally).","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":518,"short_desc":"The guild instance or the guild ID.","long_desc":null,"hint":[["string",false],["int",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":518,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"unload":{"name":"unload","line":453,"short_desc":"Unloads the command.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"usage":{"name":"usage","line":576,"short_desc":"Creates a usage string for the command.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"argString":{"name":"argString","line":576,"short_desc":"A string of arguments for the command.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"prefix":{"name":"prefix","line":576,"short_desc":"Prefix to use for the prefixed command format.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"null","variadic":false,"is_by_ref":false},"user":{"name":"user","line":576,"short_desc":"User to use for the mention command format. Defaults to client user.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":576,"endLine":576}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Commands\\CommandGroup":{"name":"CharlotteDunois\\Livia\\Commands\\CommandGroup","line":21,"short_desc":"A group for commands.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["string",false]],"id","The ID of the group."],[[["string",false]],"name","The name of the group."],[[["bool",false]],"guarded","Whether this group is guarded against disabling."],[[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"commands","The commands that the group contains."]]},"namespace":"CharlotteDunois\\Livia\\Commands","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Commands\/CommandGroup.php","relative_file":"\/src\/Commands\/CommandGroup.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"client":{"name":"client","line":21,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"commands":{"name":"commands","line":21,"short_desc":"The commands that the group contains.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guarded":{"name":"guarded","line":21,"short_desc":"Whether this group is guarded against disabling.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":21,"short_desc":"The ID of the group.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":21,"short_desc":"The name of the group.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":72,"short_desc":"Constructs a new Command Group.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":72,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":72,"endLine":72}},"default":null,"variadic":false,"is_by_ref":false},"id":{"name":"id","line":72,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"name":{"name":"name","line":72,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"guarded":{"name":"guarded","line":72,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"commands":{"name":"commands","line":72,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"null","variadic":false,"is_by_ref":false}}},"isEnabledIn":{"name":"isEnabledIn","line":183,"short_desc":"Checks if the group is enabled in a guild.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":183,"short_desc":"The guild instance or the guild ID.","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"reload":{"name":"reload","line":197,"short_desc":"Reloads all of the group's commands.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"setEnabledIn":{"name":"setEnabledIn","line":158,"short_desc":"Enables or disables the group in a guild.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":158,"short_desc":"The guild instance or the guild ID.","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":158,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"unload":{"name":"unload","line":208,"short_desc":"Unloads all of the group's commands.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Livia\\Exceptions\\CommandFormatException":{"name":"CharlotteDunois\\Livia\\Exceptions\\CommandFormatException","line":15,"short_desc":"Has a descriptive message for a command not having proper format.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Exceptions","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Exceptions\/CommandFormatException.php","relative_file":"\/src\/Exceptions\/CommandFormatException.php","parent":"CharlotteDunois\\Livia\\Exceptions\\FriendlyException","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Livia\\Exceptions\\FriendlyException":{"name":"CharlotteDunois\\Livia\\Exceptions\\FriendlyException","line":15,"short_desc":"Has a message that can be considered user-friendly.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Exceptions","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Exceptions\/FriendlyException.php","relative_file":"\/src\/Exceptions\/FriendlyException.php","parent":"Exception","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Livia\\LiviaClient":{"name":"CharlotteDunois\\Livia\\LiviaClient","line":22,"short_desc":"The Livia Client, the heart of the framework.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\CommandDispatcher",false]],"dispatcher","The client's command dispatcher."],[[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"registry","The client's command registry."],[[["\\CharlotteDunois\\Livia\\Providers\\SettingProvider",false],["null",false]],"provider","The client's setting provider."],[[["string",false],["null",false]],"commandPrefix","The global command prefix. ({@see LiviaClient::setCommandPrefix})"],[[["\\CharlotteDunois\\Yasmin\\Models\\User",true]],"owners","Owners of the bot, set by the client option owners. If you simply need to check if a user is an owner of the bot, please use LiviaClient::isOwner instead. ({@see \\CharlotteDunois\\Livia\\LiviaClient:isOwner})"]]},"namespace":"CharlotteDunois\\Livia","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/LiviaClient.php","relative_file":"\/src\/LiviaClient.php","parent":"CharlotteDunois\\Yasmin\\Client","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"commandPrefix":{"name":"commandPrefix","line":22,"short_desc":"The global command prefix. ({@see LiviaClient::setCommandPrefix})","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"dispatcher":{"name":"dispatcher","line":22,"short_desc":"The client's command dispatcher.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandDispatcher",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"owners":{"name":"owners","line":22,"short_desc":"Owners of the bot, set by the client option owners. If you simply need to check if a user is an owner of the bot, please use LiviaClient::isOwner instead. ({@see \\CharlotteDunois\\Livia\\LiviaClient:isOwner})","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"provider":{"name":"provider","line":22,"short_desc":"The client's setting provider.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Providers\\SettingProvider",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"registry":{"name":"registry","line":22,"short_desc":"The client's command registry.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":63,"short_desc":"Constructs a new Command Client. Additional available Client Options are as following:","long_desc":"```\narray(\n  'commandPrefix' => string|null, (Default command prefix, null means only mentions will trigger the handling, defaults to l$)\n  'commandBlockedMessagePattern' => bool, (Whether command pattern maatches will send command blocked messages, defaults to true)\n  'commandEditableDuration' => int, (Time in seconds that command messages should be editable, defaults to 30)\n  'commandThrottlingMessagePattern' => bool, (Whether command pattern matches will send command throttling messages, defaults to true)\n  'nonCommandEditable' => bool, (Whether messages without commands can be edited to a command, defaults to true)\n  'unknownCommandResponse' => bool, (Whether the bot should respond to an unknown command, defaults to true)\n  'owners' => string[], (array of user IDs)\n  'invite' => string, (Invite URL to the bot's support server)\n)\n```","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Exception",""],["\\RuntimeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":63,"short_desc":"Any Client Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false},"loop":{"name":"loop","line":63,"short_desc":"","long_desc":null,"hint":[["\\React\\EventLoop\\LoopInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["React","EventLoop","LoopInterface"],"attributes":{"startLine":63,"endLine":63}},"attributes":{"startLine":63,"endLine":63}},"default":"null","variadic":false,"is_by_ref":false}}},"getGuildPrefix":{"name":"getGuildPrefix","line":244,"short_desc":"Get the guild's prefix - or the default prefix. Null means only mentions.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":244,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":244,"endLine":244}},"attributes":{"startLine":244,"endLine":244}},"default":"null","variadic":false,"is_by_ref":false}}},"isOwner":{"name":"isOwner","line":202,"short_desc":"Checks whether an user is an owner of the bot.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":202,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setCommandPrefix":{"name":"setCommandPrefix","line":183,"short_desc":"Sets the global command prefix. Null indicates that there is no default prefix, and only mentions will be used. Emits a commandPrefixChange event.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"prefix":{"name":"prefix","line":183,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"fromProvider":{"name":"fromProvider","line":183,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"setGuildPrefix":{"name":"setGuildPrefix","line":265,"short_desc":"Set the guild's prefix. An empty string means the command prefix will be used. Null means only mentions.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":265,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":265,"endLine":265}},"attributes":{"startLine":265,"endLine":265}},"default":null,"variadic":false,"is_by_ref":false},"prefix":{"name":"prefix","line":265,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"null","variadic":false,"is_by_ref":false}}},"setProvider":{"name":"setProvider","line":215,"short_desc":"Sets the setting provider to use, and initializes it once the client is ready.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"provider":{"name":"provider","line":215,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Providers\\SettingProvider",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Providers","SettingProvider"],"attributes":{"startLine":215,"endLine":215}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\LiviaClientEvents":{"name":"CharlotteDunois\\Livia\\LiviaClientEvents","line":15,"short_desc":"Documents all LiviaClient events (exlucing events from Yasmin).","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/LiviaClientEvents.php","relative_file":"\/src\/LiviaClientEvents.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"commandBlocked":{"name":"commandBlocked","line":26,"short_desc":"Emitted when a command is prevented from running.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":26,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":26,"endLine":26}},"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":26,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"commandError":{"name":"commandError","line":32,"short_desc":"Emitted when a command produces an error while running.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":32,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":32,"endLine":32}},"default":null,"variadic":false,"is_by_ref":false},"error":{"name":"error","line":32,"short_desc":null,"long_desc":null,"hint":[["\\Throwable",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Throwable"],"attributes":{"startLine":32,"endLine":32}},"default":null,"variadic":false,"is_by_ref":false},"message":{"name":"message","line":32,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":32,"endLine":32}},"default":null,"variadic":false,"is_by_ref":false},"args":{"name":"args","line":32,"short_desc":null,"long_desc":null,"hint":[["\\ArrayObject",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["ArrayObject"],"attributes":{"startLine":32,"endLine":32}},"default":null,"variadic":false,"is_by_ref":false},"fromPattern":{"name":"fromPattern","line":32,"short_desc":null,"long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"commandPrefixChange":{"name":"commandPrefixChange","line":82,"short_desc":"Emitted whenever a guild's command prefix is changed. Guild will be null if the prefix is global. Prefix will be null if it is changed to default.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":82,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"newPrefix":{"name":"newPrefix","line":82,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"commandRegister":{"name":"commandRegister","line":50,"short_desc":"Emitted when a command is registered.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":50,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":50,"endLine":50}},"default":null,"variadic":false,"is_by_ref":false},"registry":{"name":"registry","line":50,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandRegistry"],"attributes":{"startLine":50,"endLine":50}},"default":null,"variadic":false,"is_by_ref":false}}},"commandReregister":{"name":"commandReregister","line":56,"short_desc":"Emitted when a command is re-registered.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":56,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":56,"endLine":56}},"default":null,"variadic":false,"is_by_ref":false},"oldCommand":{"name":"oldCommand","line":56,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":56,"endLine":56}},"default":null,"variadic":false,"is_by_ref":false},"registry":{"name":"registry","line":56,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandRegistry"],"attributes":{"startLine":56,"endLine":56}},"default":null,"variadic":false,"is_by_ref":false}}},"commandRun":{"name":"commandRun","line":38,"short_desc":"Emitted when running a command.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":38,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"promise":{"name":"promise","line":38,"short_desc":null,"long_desc":null,"hint":[["\\React\\Promise\\PromiseInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["React","Promise","PromiseInterface"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"message":{"name":"message","line":38,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"args":{"name":"args","line":38,"short_desc":null,"long_desc":null,"hint":[["\\ArrayObject",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["ArrayObject"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false},"fromPattern":{"name":"fromPattern","line":38,"short_desc":null,"long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"commandStatusChange":{"name":"commandStatusChange","line":91,"short_desc":"Emitted whenever a command is enabled\/disabled in a guild. Guild will be null if status is global.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":91,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":91,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":91,"endLine":91}},"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":91,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"commandUnregister":{"name":"commandUnregister","line":62,"short_desc":"Emitted when a command is unregistered.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":62,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":62,"endLine":62}},"default":null,"variadic":false,"is_by_ref":false},"registry":{"name":"registry","line":62,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandRegistry"],"attributes":{"startLine":62,"endLine":62}},"default":null,"variadic":false,"is_by_ref":false}}},"groupRegister":{"name":"groupRegister","line":68,"short_desc":"Emitted when a group is registered.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"group":{"name":"group","line":68,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","CommandGroup"],"attributes":{"startLine":68,"endLine":68}},"default":null,"variadic":false,"is_by_ref":false},"registry":{"name":"registry","line":68,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandRegistry"],"attributes":{"startLine":68,"endLine":68}},"default":null,"variadic":false,"is_by_ref":false}}},"groupStatusChange":{"name":"groupStatusChange","line":100,"short_desc":"Emitted whenever a group is enabled\/disabled in a guild. Guild will be null if status is global.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":100,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"group":{"name":"group","line":100,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","CommandGroup"],"attributes":{"startLine":100,"endLine":100}},"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":100,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"typeRegister":{"name":"typeRegister","line":74,"short_desc":"Emitted when an argument type is registered.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"type":{"name":"type","line":74,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Types\\ArgumentType",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Types","ArgumentType"],"attributes":{"startLine":74,"endLine":74}},"default":null,"variadic":false,"is_by_ref":false},"registry":{"name":"registry","line":74,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandRegistry",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandRegistry"],"attributes":{"startLine":74,"endLine":74}},"default":null,"variadic":false,"is_by_ref":false}}},"unknownCommand":{"name":"unknownCommand","line":44,"short_desc":"Emitted when an user tries to use an unknown command.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":44,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":44,"endLine":44}},"default":null,"variadic":false,"is_by_ref":false}}},"warn":{"name":"warn","line":20,"short_desc":"Emitted when something out of expectation occurres. A warning for you.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":20,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Providers\\MySQLProvider":{"name":"CharlotteDunois\\Livia\\Providers\\MySQLProvider","line":15,"short_desc":"Loads and stores settings associated with guilds in a MySQL database. Requires the composer package react\/mysql.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Providers","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Providers\/MySQLProvider.php","relative_file":"\/src\/Providers\/MySQLProvider.php","parent":"CharlotteDunois\\Livia\\Providers\\SettingProvider","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":38,"short_desc":"Constructs a new instance.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"db":{"name":"db","line":38,"short_desc":"","long_desc":null,"hint":[["\\React\\MySQL\\ConnectionInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["React","MySQL","ConnectionInterface"],"attributes":{"startLine":38,"endLine":38}},"default":null,"variadic":false,"is_by_ref":false}}},"clear":{"name":"clear","line":181,"short_desc":"Removes all settings in a guild.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":181,"short_desc":null,"long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"create":{"name":"create","line":96,"short_desc":"Creates a new table row in the db for the guild, if it doesn't exist already - otherwise loads the row.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":96,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"settings":{"name":"settings","line":96,"short_desc":"","long_desc":null,"hint":[["array",false],["\\ArrayObject",false]],"tags":[],"modifiers":null,"default":"array()","variadic":false,"is_by_ref":true}}},"destroy":{"name":"destroy","line":56,"short_desc":"Destroys the provider, removing any event listeners.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":113,"short_desc":"Gets a setting from a guild.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":113,"short_desc":null,"long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":113,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"defaultValue":{"name":"defaultValue","line":113,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}},"getDB":{"name":"getDB","line":48,"short_desc":"Returns the MySQL connection.","long_desc":"","hint":[["\\React\\MySQL\\Connection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"init":{"name":"init","line":66,"short_desc":"Initializes the provider by connecting to databases and\/or caching all data in memory. LiviaClient::setProvider will automatically call this once the client is ready.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":66,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":66,"endLine":66}},"default":null,"variadic":false,"is_by_ref":false}}},"remove":{"name":"remove","line":157,"short_desc":"Removes a setting from a guild.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":157,"short_desc":null,"long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":157,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"runQuery":{"name":"runQuery","line":197,"short_desc":"Runs a SQL query. Resolves with the QueryResult instance.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["https:\/\/github.com\/friends-of-reactphp\/mysql\/blob\/master\/src\/QueryResult.php"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"sql":{"name":"sql","line":197,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"parameters":{"name":"parameters","line":197,"short_desc":"Parameters for the query - these get escaped","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":135,"short_desc":"Sets a setting for a guild.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":135,"short_desc":null,"long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":135,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":135,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Providers\\SettingProvider":{"name":"CharlotteDunois\\Livia\\Providers\\SettingProvider","line":18,"short_desc":"Loads and stores settings associated with guilds.","long_desc":"Classes extending this class must assign the client received in the `init` method to the `client` property.","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client this provider is for. This property is NOT accessible outside of the class and is only for documentation purpose here (for extending the class)."]]},"namespace":"CharlotteDunois\\Livia\\Providers","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Providers\/SettingProvider.php","relative_file":"\/src\/Providers\/SettingProvider.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"client":{"name":"client","line":18,"short_desc":"The client this provider is for. This property is NOT accessible outside of the class and is only for documentation purpose here (for extending the class).","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"attachListeners":{"name":"attachListeners","line":113,"short_desc":"This method will attach all necessary event listeners to the client.","long_desc":"Providers extending this class must call this method when initializing the provider (in the `init` method).","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"callbackCommandPrefixChange":{"name":"callbackCommandPrefixChange","line":216,"short_desc":"The callback for the command prefix change event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":216,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":216,"endLine":216}},"attributes":{"startLine":216,"endLine":216}},"default":null,"variadic":false,"is_by_ref":false},"prefix":{"name":"prefix","line":216,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":216,"endLine":216}},"default":null,"variadic":false,"is_by_ref":false}}},"callbackCommandRegister":{"name":"callbackCommandRegister","line":268,"short_desc":"The callback for the command register and reregister event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":["The \"copmmand\" @param tag variable name is wrong (should be \"command\")"],"example":null,"source":null,"parameters":{"command":{"name":"command","line":268,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":268,"endLine":268}},"default":null,"variadic":false,"is_by_ref":false}}},"callbackCommandStatusChange":{"name":"callbackCommandStatusChange","line":231,"short_desc":"The callback for the command status change event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":["The \"prefix\" @param tag variable name is wrong (should be \"command\")"],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":231,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":231,"endLine":231}},"attributes":{"startLine":231,"endLine":231}},"default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":231,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":231,"endLine":231}},"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":231,"short_desc":null,"long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"callbackGroupRegister":{"name":"callbackGroupRegister","line":283,"short_desc":"The callback for the group register and reregister event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"group":{"name":"group","line":283,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","CommandGroup"],"attributes":{"startLine":283,"endLine":283}},"default":null,"variadic":false,"is_by_ref":false}}},"callbackGroupStatusChange":{"name":"callbackGroupStatusChange","line":246,"short_desc":"The callback for the group status change event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":["The \"prefix\" @param tag variable name is wrong (should be \"group\")"],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":246,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":246,"endLine":246}},"attributes":{"startLine":246,"endLine":246}},"default":null,"variadic":false,"is_by_ref":false},"group":{"name":"group","line":246,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","CommandGroup"],"attributes":{"startLine":246,"endLine":246}},"default":null,"variadic":false,"is_by_ref":false},"enabled":{"name":"enabled","line":246,"short_desc":null,"long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"callbackGuildCreate":{"name":"callbackGuildCreate","line":259,"short_desc":"The callback for the guild create event.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":259,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":259,"endLine":259}},"default":null,"variadic":false,"is_by_ref":false}}},"clear":{"name":"clear","line":91,"short_desc":"Removes all settings in a guild.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":91,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"create":{"name":"create","line":51,"short_desc":"Creates a new table row in the db for the guild, if it doesn't exist already - otherwise loads the row.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":51,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"settings":{"name":"settings","line":51,"short_desc":"","long_desc":null,"hint":[["array",false],["\\ArrayObject",false]],"tags":[],"modifiers":null,"default":"array()","variadic":false,"is_by_ref":true}}},"destroy":{"name":"destroy","line":42,"short_desc":"Destroys the provider, removing any event listeners.","long_desc":"","hint":[["mixed",false],["void",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":62,"short_desc":"Gets a setting from a guild.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":62,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":62,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"defaultValue":{"name":"defaultValue","line":62,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}},"getGuildID":{"name":"getGuildID","line":99,"short_desc":"Obtains the ID of the provided guild.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":99,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["string",false],["int",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"init":{"name":"init","line":36,"short_desc":"Initializes the provider by connecting to databases and\/or caching all data in memory. LiviaClient::setProvider will automatically call this once the client is ready.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":36,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","LiviaClient"],"attributes":{"startLine":36,"endLine":36}},"default":null,"variadic":false,"is_by_ref":false}}},"remove":{"name":"remove","line":83,"short_desc":"Removes a setting from a guild.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":83,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"removeListeners":{"name":"removeListeners","line":134,"short_desc":"This method will remove the attached event listeners from the client.","long_desc":"Providers extending this class must call this method when destroying the provider (in the `destroy` method).","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":73,"short_desc":"Sets a setting for a guild.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":73,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"key":{"name":"key","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":73,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setupGuild":{"name":"setupGuild","line":154,"short_desc":"Loads all settings for a guild. Used in listener callbacks.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":154,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setupGuildCommand":{"name":"setupGuildCommand","line":187,"short_desc":"Sets up a command's status in a guild from the guild's settings. Used in listener callbacks.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":187,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"command":{"name":"command","line":187,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\Command",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","Command"],"attributes":{"startLine":187,"endLine":187}},"default":null,"variadic":false,"is_by_ref":false},"settings":{"name":"settings","line":187,"short_desc":"","long_desc":null,"hint":[["array",false],["\\ArrayObject",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":true}}},"setupGuildGroup":{"name":"setupGuildGroup","line":202,"short_desc":"Sets up a group's status in a guild from the guild's settings. Used in listener callbacks.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":202,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"group":{"name":"group","line":202,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Commands\\CommandGroup",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Commands","CommandGroup"],"attributes":{"startLine":202,"endLine":202}},"default":null,"variadic":false,"is_by_ref":false},"settings":{"name":"settings","line":202,"short_desc":"","long_desc":null,"hint":[["array",false],["\\ArrayObject",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":true}}}},"constants":[]},"CharlotteDunois\\Livia\\Types\\ArgumentType":{"name":"CharlotteDunois\\Livia\\Types\\ArgumentType","line":18,"short_desc":"An argument type that can be used for argument collecting.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"client","The client which initiated the instance."],[[["string",false]],"id","The argument type ID."]]},"namespace":"CharlotteDunois\\Livia\\Types","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Types\/ArgumentType.php","relative_file":"\/src\/Types\/ArgumentType.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"client":{"name":"client","line":18,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\LiviaClient",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":18,"short_desc":"The argument type ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"isEmpty":{"name":"isEmpty","line":127,"short_desc":"Checks whether a value is considered to be empty. This determines whether the default value for an argument should be used and changes the response to the user under certain circumstances.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":127,"short_desc":"Value to check.","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"message":{"name":"message","line":127,"short_desc":"Message the value was obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":127,"endLine":127}},"default":null,"variadic":false,"is_by_ref":false},"arg":{"name":"arg","line":127,"short_desc":"Argument the value obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Arguments\\Argument",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Arguments","Argument"],"attributes":{"startLine":127,"endLine":127}},"attributes":{"startLine":127,"endLine":127}},"default":"null","variadic":false,"is_by_ref":false}}},"parse":{"name":"parse","line":118,"short_desc":"Parses a value into an usable value. If the return is a promise, the promise has to resolve with one of the other return types.","long_desc":"","hint":[["mixed",false],["null",false],["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[["\\RangeException",""]],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":118,"short_desc":"Value to parse.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"message":{"name":"message","line":118,"short_desc":"Message the value was obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":118,"endLine":118}},"default":null,"variadic":false,"is_by_ref":false},"arg":{"name":"arg","line":118,"short_desc":"Argument the value obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Arguments\\Argument",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Arguments","Argument"],"attributes":{"startLine":118,"endLine":118}},"attributes":{"startLine":118,"endLine":118}},"default":"null","variadic":false,"is_by_ref":false}}},"validate":{"name":"validate","line":108,"short_desc":"Validates a value against the type. If the return is a promise, the promise has to resolve with one of the other return types.","long_desc":"","hint":[["bool",false],["string",false],["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":17,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":108,"short_desc":"Value to validate.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"message":{"name":"message","line":108,"short_desc":"Message the value was obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\CommandMessage",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","CommandMessage"],"attributes":{"startLine":108,"endLine":108}},"default":null,"variadic":false,"is_by_ref":false},"arg":{"name":"arg","line":108,"short_desc":"Argument the value obtained from.","long_desc":null,"hint":[["\\CharlotteDunois\\Livia\\Arguments\\Argument",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Livia","Arguments","Argument"],"attributes":{"startLine":108,"endLine":108}},"attributes":{"startLine":108,"endLine":108}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Utils\\DataHelpers":{"name":"CharlotteDunois\\Livia\\Utils\\DataHelpers","line":15,"short_desc":"Data orientated helpers.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Utils\/DataHelpers.php","relative_file":"\/src\/Utils\/DataHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"disambiguation":{"name":"disambiguation","line":23,"short_desc":"If a selection is ambiguous, this will make a list of selectable items.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"items":{"name":"items","line":23,"short_desc":"","long_desc":null,"hint":[["array",false],["\\CharlotteDunois\\Yasmin\\Utils\\Collection",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"label":{"name":"label","line":23,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"property":{"name":"property","line":23,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":23,"endLine":23}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Utils\\FileHelpers":{"name":"CharlotteDunois\\Livia\\Utils\\FileHelpers","line":15,"short_desc":"File orientated helpers.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Utils\/FileHelpers.php","relative_file":"\/src\/Utils\/FileHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"recursiveFileSearch":{"name":"recursiveFileSearch","line":22,"short_desc":"Performs a recursive file search in the specified path, using the specified search mask.","long_desc":"","hint":[["string",true]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":22,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"searchmask":{"name":"searchmask","line":22,"short_desc":"","long_desc":null,"hint":[["string",false],["array",false]],"tags":[],"modifiers":null,"default":"'*'","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Livia\\Utils\\HRTimer":{"name":"CharlotteDunois\\Livia\\Utils\\HRTimer","line":15,"short_desc":"Provides a simple interface to a timer.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Livia\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Livia\/master\/src\/Utils\/HRTimer.php","relative_file":"\/src\/Utils\/HRTimer.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":43,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getResolution":{"name":"getResolution","line":56,"short_desc":"Returns the resolution (the end product of 10^X, positive). Nano for hrtime (native and pecl), micro for fallback.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"start":{"name":"start","line":64,"short_desc":"Starts the timer.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"stop":{"name":"stop","line":78,"short_desc":"Stops the timer and returns the elapsed time, in nanoseconds.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"time":{"name":"time","line":100,"short_desc":"Returns the elapsed time since the last `time` call, in nanoseconds.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]}}